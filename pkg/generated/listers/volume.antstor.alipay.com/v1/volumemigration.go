/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "lite.io/liteio/pkg/api/volume.antstor.alipay.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VolumeMigrationLister helps list VolumeMigrations.
// All objects returned here must be treated as read-only.
type VolumeMigrationLister interface {
	// List lists all VolumeMigrations in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.VolumeMigration, err error)
	// VolumeMigrations returns an object that can list and get VolumeMigrations.
	VolumeMigrations(namespace string) VolumeMigrationNamespaceLister
	VolumeMigrationListerExpansion
}

// volumeMigrationLister implements the VolumeMigrationLister interface.
type volumeMigrationLister struct {
	indexer cache.Indexer
}

// NewVolumeMigrationLister returns a new VolumeMigrationLister.
func NewVolumeMigrationLister(indexer cache.Indexer) VolumeMigrationLister {
	return &volumeMigrationLister{indexer: indexer}
}

// List lists all VolumeMigrations in the indexer.
func (s *volumeMigrationLister) List(selector labels.Selector) (ret []*v1.VolumeMigration, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VolumeMigration))
	})
	return ret, err
}

// VolumeMigrations returns an object that can list and get VolumeMigrations.
func (s *volumeMigrationLister) VolumeMigrations(namespace string) VolumeMigrationNamespaceLister {
	return volumeMigrationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VolumeMigrationNamespaceLister helps list and get VolumeMigrations.
// All objects returned here must be treated as read-only.
type VolumeMigrationNamespaceLister interface {
	// List lists all VolumeMigrations in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.VolumeMigration, err error)
	// Get retrieves the VolumeMigration from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.VolumeMigration, error)
	VolumeMigrationNamespaceListerExpansion
}

// volumeMigrationNamespaceLister implements the VolumeMigrationNamespaceLister
// interface.
type volumeMigrationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VolumeMigrations in the indexer for a given namespace.
func (s volumeMigrationNamespaceLister) List(selector labels.Selector) (ret []*v1.VolumeMigration, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VolumeMigration))
	})
	return ret, err
}

// Get retrieves the VolumeMigration from the indexer for a given namespace and name.
func (s volumeMigrationNamespaceLister) Get(name string) (*v1.VolumeMigration, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("volumemigration"), name)
	}
	return obj.(*v1.VolumeMigration), nil
}
