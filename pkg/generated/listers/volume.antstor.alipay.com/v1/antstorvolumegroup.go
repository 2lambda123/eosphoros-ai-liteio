/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "lite.io/liteio/pkg/api/volume.antstor.alipay.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AntstorVolumeGroupLister helps list AntstorVolumeGroups.
// All objects returned here must be treated as read-only.
type AntstorVolumeGroupLister interface {
	// List lists all AntstorVolumeGroups in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.AntstorVolumeGroup, err error)
	// AntstorVolumeGroups returns an object that can list and get AntstorVolumeGroups.
	AntstorVolumeGroups(namespace string) AntstorVolumeGroupNamespaceLister
	AntstorVolumeGroupListerExpansion
}

// antstorVolumeGroupLister implements the AntstorVolumeGroupLister interface.
type antstorVolumeGroupLister struct {
	indexer cache.Indexer
}

// NewAntstorVolumeGroupLister returns a new AntstorVolumeGroupLister.
func NewAntstorVolumeGroupLister(indexer cache.Indexer) AntstorVolumeGroupLister {
	return &antstorVolumeGroupLister{indexer: indexer}
}

// List lists all AntstorVolumeGroups in the indexer.
func (s *antstorVolumeGroupLister) List(selector labels.Selector) (ret []*v1.AntstorVolumeGroup, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AntstorVolumeGroup))
	})
	return ret, err
}

// AntstorVolumeGroups returns an object that can list and get AntstorVolumeGroups.
func (s *antstorVolumeGroupLister) AntstorVolumeGroups(namespace string) AntstorVolumeGroupNamespaceLister {
	return antstorVolumeGroupNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AntstorVolumeGroupNamespaceLister helps list and get AntstorVolumeGroups.
// All objects returned here must be treated as read-only.
type AntstorVolumeGroupNamespaceLister interface {
	// List lists all AntstorVolumeGroups in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.AntstorVolumeGroup, err error)
	// Get retrieves the AntstorVolumeGroup from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.AntstorVolumeGroup, error)
	AntstorVolumeGroupNamespaceListerExpansion
}

// antstorVolumeGroupNamespaceLister implements the AntstorVolumeGroupNamespaceLister
// interface.
type antstorVolumeGroupNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AntstorVolumeGroups in the indexer for a given namespace.
func (s antstorVolumeGroupNamespaceLister) List(selector labels.Selector) (ret []*v1.AntstorVolumeGroup, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AntstorVolumeGroup))
	})
	return ret, err
}

// Get retrieves the AntstorVolumeGroup from the indexer for a given namespace and name.
func (s antstorVolumeGroupNamespaceLister) Get(name string) (*v1.AntstorVolumeGroup, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("antstorvolumegroup"), name)
	}
	return obj.(*v1.AntstorVolumeGroup), nil
}
